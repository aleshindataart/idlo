<?php

/**
 * @file
 * Functions to support theming in the FlexiStyle theme.
 */

declare(strict_types=1);

/**
 * Implements hook_preprocess_html() for html.html.twig.
 */
function flexi_style_preprocess_html(array &$variables): void {
  // Header settings.
  $variables['header_position'] = $header_position = theme_get_setting('header_position');

  // Global settings.
  $variables['fonts'] = $fonts = theme_get_setting('fonts');
  if ($fonts) {
    $variables['#attached']['library'][] = 'flexi_style/' . $fonts;
  }

  $variables['icons'] = $icons = theme_get_setting('icons');
  $variables['global_style'] = $global_style = theme_get_setting('global_style');
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function flexi_style_preprocess_page(array &$variables): void {
  // Top Header settings.
  $variables['top_header_bg'] = $top_header_bg = theme_get_setting('top_header_bg');
  $variables['top_header_classes'] = $top_header_classes = theme_get_setting('top_header_classes');

  // Header settings.
  $variables['header_style'] = $header_style = theme_get_setting('header_style');
  $variables['header_navbar_bg'] = $header_navbar_bg = theme_get_setting('header_navbar_bg');
  $variables['header_classes'] = $header_classes = theme_get_setting('header_classes');

  // Footer settings.
  $variables['footer_bg'] = $footer_bg = theme_get_setting('footer_bg');
  $variables['footer_classes'] = $footer_classes = theme_get_setting('footer_classes');
  $variables['footer_bottom_bg'] = $footer_bottom_bg = theme_get_setting('footer_bottom_bg');
  $variables['footer_bottom_classes'] = $footer_bottom_classes = theme_get_setting('footer_bottom_classes');

  // Global settings.
  $variables['icons'] = $icons = theme_get_setting('icons');
  if ($icons) {
    $variables['#attached']['library'][] = 'flexi_style/' . $icons;
  }
}

/**
 * Implements hook_preprocess_menu() for menu.html.twig.
 */
function flexi_style_preprocess_menu(array &$variables): void {
  $variables['header_style'] = $header_style = theme_get_setting('header_style');
  $variables['header_navbar_bg'] = $header_navbar_bg = theme_get_setting('header_navbar_bg');
  if ($variables['menu_name'] == 'main') {
    if ($header_style == 'style-1') {
      $variables['attributes']['class'][] = 'bg-white';
    }
    elseif ($header_style == 'style-2') {
      $variables['attributes']['class'][] = $header_navbar_bg;
    }
  }
}

/**
 * Implements hook_preprocess_maintenance_page() for maintenance-page.htm.twig.
 */
function flexi_style_preprocess_maintenance_page(array &$variables): void {
  // $theme_settings = \Drupal::config('flexi_style.settings');
  $variables['icons'] = $icons = theme_get_setting('icons');
  if ($icons) {
    $variables['#attached']['library'][] = 'flexi_style/' . $icons;
  }
  $variables['maintenance_mode_time'] = $maintenance_mode_time = theme_get_setting('maintenance_mode_time');
}

/**
 * Implements hook_form_alter() for form elements.
 */
function flexi_style_form_alter(&$form, &$form_state, $form_id): void {
  if ($form_id == 'search_block_form') {
    $form['keys']['#attributes']['placeholder'] = t('Enter search terms...');
  }
  if ($form_id == 'user_login_form') {
    $form['markup'] = [
      '#markup' => '<div class="text-right reset-pass"><a href="/user/password" title="Send password reset instructions via email." class="request-password-link">Forgot password?</a></div>',
    ];
    $form['name']['#attributes']['placeholder'] = t('Username or email address');
    $form['pass']['#attributes']['placeholder'] = t('Password');
  }
  if ($form_id == 'user_pass') {
    $form['name']['#attributes']['placeholder'] = t('Username or email address');
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function flexi_style_theme_suggestions_alter(array &$suggestions, array &$variables, $hook): void {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
  if ($hook == 'user' & !empty($variables['elements']['#view_mode'])) {
    $view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
    $user_id = \Drupal::service('current_user')->id();
    $suggestions[] = 'user__' . $view_mode;
    $suggestions[] = 'user__' . $user_id;
    $suggestions[] = 'user__' . $user_id . '__' . $view_mode;
  }
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function flexi_style_preprocess_node(&$variables) {
  // Check if the content type is 'article'.
  if ($variables['node']->getType() == 'article') {
    // Set display_submitted to FALSE.
    $variables['display_submitted'] = FALSE;
  }
}
